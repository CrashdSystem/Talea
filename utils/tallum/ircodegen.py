# Based on the VM translator from Nand2Tetris
from sys import argv, stderr
from typing import List

VERSION = "0.1"


            
def generate(source: List[str]) -> str:
    asm = "; Code generated by IR translation TTVM v" + VERSION + "\n"
    
    asm += f"{STATIC}:\n"
    for number, line in enumerate(source):
        #transform comments
        line = line.replace("//", ";")
        asm += f"; {line}"
        asm += translate(line, number)
    
    asm += "\n" + "\n".join(STATIC_ENV)
    return asm
    
def main(argv):
    global STATIC
    global SUPER
    
    if len(argv) != 4:
        print("Usage:", argv[0], "[user|super] [O0|O1] [fname]")
        exit(1)
    
    with open(argv[3], "r") as f:
        source = f.readlines()
        
    STATIC = argv[3].split('.')[0].replace("/", "_")
    if argv[1].lower() == "super":
        SUPER = True
    else:
        STATIC_ENV.append(f"STATIC_{STATIC}: ; STATIC ALLOCATIONS FOLLOW")
        
    asm = generate(source)
    outfname = STATIC.replace("_", "/") + ".s"
    
    if argv[2].lower() == "o1":
        asm = remove_comments(asm)
        asm = optimize(asm)
    
    with open(outfname, "w") as out:
        out.write(asm)

if __name__ == "__main__":
    main(argv)